// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Sega Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

//-------Aliases-------//
private alias 1 : TYPE_SEGA
public alias 256 : GROUP_PLAYERS
public alias 65536 : HITBOX_AUTO
public alias arrayPos6 : currentPlayer
public alias arrayPos7 : playerCount

private alias object.value13 : reset.done

public alias saveRAM[257] : saved.spindash
public alias saveRAM[258] : saved.speedCap
public alias saveRAM[259] : saved.airSpeedCap
public alias saveRAM[260] : saved.spikeBehavior
public alias saveRAM[261] : saved.shieldType
public alias saveRAM[262] : saved.superStates
public alias saveRAM[263] : saved.Jumplock
public alias saveRAM[264] : saved.Supermusic
public alias saveRAM[265] : saved.Dropdash
public alias saveRAM[266] : saved.Instashield
public alias saveRAM[267] : saved.Peelout
public alias saveRAM[268] : saved.FlightCancel
public alias saveRAM[269] : saved.SonicMaxDash
public alias saveRAM[270] : saved.Speen
public alias saveRAM[271] : saved.Supercancel
public alias saveRAM[272] : saved.Drowning
public alias saveRAM[273] : saved.Timer
public alias saveRAM[274] : saved.region
public alias saveRAM[275] : saved.UFO
public alias saveRAM[276] : saved.rotate
public alias saveRAM[277] : saved.invincibilityType
public alias saveRAM[280] : saved.gogoplus
public alias saveRAM[281] : saved.lives
public alias saveRAM[282] : saved.bubble
public alias saveRAM[283] : saved.specialSpin
public alias saveRAM[284] : saved.timeLimit
public alias saveRAM[285] : saved.GHZwater
public alias saveRAM[286] : saved.language
public alias saveRAM[287] : saved.elemental
public alias saveRAM[290] : saved.randomMonitor
public alias saveRAM[294] : saved.graphics

// Object aliases
private alias arrayPos0 : currentVertex
private alias arrayPos1 : currentFace
private alias object.value0 : object.timer
private alias object.value1 : object.zpos
private alias object.value2 : object.xpos3D
private alias object.value8 : object.ypos3D
private alias object.value3 : object.column2Timer
private alias object.value4 : object.column3Timer
private alias object.value5 : object.column4Timer
private alias object.value6 : object.row2Timer
private alias object.value7 : object.row3Timer

// Face Aliases
private alias 0 : FACE_TEXTURED_3D
private alias 1 : FACE_TEXTURED_2D
private alias 2 : FACE_COLOURED_3D
private alias 3 : FACE_COLOURED_2D
private alias 4 : FACE_FADED
private alias 5 : FACE_TEXTURED_C
private alias 6 : FACE_TEXTURED_D
private alias 7 : FACE_SPRITE3D

private alias 0 : FACEA1
private alias 1 : FACEA2
private alias 2 : FACEA3
private alias 3 : FACEA4
private alias 4 : FACEB1
private alias 5 : FACEB2
private alias 6 : FACEB3
private alias 7 : FACEB4
private alias 8 : FACEC1
private alias 9 : FACEC2
private alias 10 : FACEC3
private alias 11 : FACEC4

// States
private alias 0 : SEGA_POPUP
private alias 1 : SEGA_JIGGLE
private alias 2 : SEGA_STOPJIGGLE
private alias 3 : SEGA_PALETTECYCLE
private alias 4 : SEGA_POPUP2

private value FaceCount = 12

private value SpriteX = 3
private value SpriteY = 2

private value column1.x
private value column2.x
private value column3.x
private value column4.x
private value column5.x

private value row1.y
private value row2.y
private value row3.y
private value row4.y

// ========================
// Tables
// ========================

private table XOffsets
	0, 42, 79, 115, 170
end table

private table YOffsets
	0, 17, 36, 53
end table

private table XSizes
	42, 37, 36, 55
end table

private table YSizes
	17, 19, 17
end table

private table Column1Vertices
	0, 0, 0, 0
end table

private table Column2Vertices
	0, 0, 0, 0
end table

private table Column3Vertices
	0, 0, 0, 0
end table

private table Column4Vertices
	0, 0, 0, 0
end table

private table Column5Vertices
	0, 0, 0, 0
end table

private table Row1Vertices
	0, 0, 0, 0, 0
end table

private table Row2Vertices
	0, 0, 0, 0, 0
end table

private table Row3Vertices
	0, 0, 0, 0, 0
end table

private table Row4Vertices
	0, 0, 0, 0, 0
end table

private table Row5Vertices
	0, 0, 0, 0, 0
end table

// Function declarations
reserve function Sega_Function0
reserve function Save_Transfer
reserve function Sega_MoveVertices

function Sega_MoveVertices
	object.column2Timer %= 256
	object.column3Timer %= 256
	object.column4Timer %= 256
	object.row2Timer %= 256
	object.row3Timer %= 256
	
	temp2 = 10
	
	temp0 = object.column2Timer
	Sin256(temp1, temp0)
	temp1 *= temp2
	column2.x = temp1
	GetTableValue(temp3, 1, XOffsets)
	temp3 <<= 8
	column2.x += temp3
	
	temp0 = object.column3Timer
	Sin256(temp1, temp0)
	temp1 *= temp2
	column3.x = temp1
	GetTableValue(temp3, 2, XOffsets)
	temp3 <<= 8
	column3.x += temp3
	
	temp0 = object.column4Timer
	Sin256(temp1, temp0)
	temp1 *= temp2
	column4.x = temp1
	GetTableValue(temp3, 3, XOffsets)
	temp3 <<= 8
	column4.x += temp3
	
	temp2 -= 4
	
	temp0 = object.row2Timer
	Sin256(temp1, temp0)
	temp1 *= temp2
	row2.y = temp1
	GetTableValue(temp3, 1, YOffsets)
	temp3 <<= 8
	row2.y += temp3
	
	temp0 = object.row3Timer
	Sin256(temp1, temp0)
	temp1 *= temp2
	row3.y = temp1
	GetTableValue(temp3, 2, YOffsets)
	temp3 <<= 8
	row3.y += temp3
end function


function Save_Transfer
	ReadSaveRAM()
	if saveRAM[4] == 0
	
	else
		saveRAM[1000] = saveRAM[0]
		saveRAM[1001] = saveRAM[1]
		saveRAM[1002] = saveRAM[2]
		saveRAM[1003] = saveRAM[3]
		saveRAM[1004] = saveRAM[4]
		saveRAM[1005] = saveRAM[5]
		saveRAM[1006] = saveRAM[6]
		saveRAM[1007] = saveRAM[7]
	end if
	
	
	if saveRAM[12] == 0
	
	else	
		saveRAM[1008] = saveRAM[8]
		saveRAM[1009] = saveRAM[9]
		saveRAM[1010] = saveRAM[10]
		saveRAM[1011] = saveRAM[11]
		saveRAM[1012] = saveRAM[12]
		saveRAM[1013] = saveRAM[13]
		saveRAM[1014] = saveRAM[14]
		saveRAM[1015] = saveRAM[15]
	end if
	
	
	if saveRAM[20] == 0
	
	else	
		saveRAM[1016] = saveRAM[16]
		saveRAM[1017] = saveRAM[17]
		saveRAM[1018] = saveRAM[18]
		saveRAM[1019] = saveRAM[19]
		saveRAM[1020] = saveRAM[20]
		saveRAM[1021] = saveRAM[21]
		saveRAM[1022] = saveRAM[22]
		saveRAM[1023] = saveRAM[23]
	end if
	
	
	if saveRAM[28] == 0
	
	else	
		saveRAM[1024] = saveRAM[24]
		saveRAM[1025] = saveRAM[25]
		saveRAM[1026] = saveRAM[26]
		saveRAM[1027] = saveRAM[27]
		saveRAM[1028] = saveRAM[28]
		saveRAM[1029] = saveRAM[29]
		saveRAM[1030] = saveRAM[30]
		saveRAM[1031] = saveRAM[31]
	end if
	
	WriteSaveRAM()
	PlaySfx(SfxName[Lamp Post], 0)
end function

function Sega_Function0
	CheckTouchRect(0, 0, screen.xsize, screen.ysize)
	if checkResult == -1
		object.value4 = 0
	end if
	if object.value4 == 0
		temp0 = screen.xcenter
		switch object.value3
		case 0
			temp0 -= 93
			temp1 = temp0
			temp1 += 39
			break
		case 1
			temp0 -= 50
			temp1 = temp0
			temp1 += 42
			break
		case 2
			temp0 -= 6
			temp1 = temp0
			temp1 += 42
			break
		case 3
			temp0 += 36
			temp1 = temp0
			temp1 += 58
			break
		end switch
		CheckTouchRect(temp0, 90, temp1, 150)
		if checkResult > -1
			object.value4 = 1
			object.value3++
			if object.value3 == 4
				PlaySfx(SfxName[Ring L], 0)
				options.stageSelectFlag = 1
				saveRAM[295] = 1
				WriteSaveRam()
			end if
		end if
		temp0 = screen.xcenter
		switch object.value5
		case 0
			temp0 += 36
			temp1 = temp0
			temp1 += 58
			break
		case 1
			temp0 -= 6
			temp1 = temp0
			temp1 += 42
			break
		case 2
			temp0 -= 50
			temp1 = temp0
			temp1 += 42
			break
		case 3
			temp0 -= 93
			temp1 = temp0
			temp1 += 39
			break
		end switch
		CheckTouchRect(temp0, 90, temp1, 150)
		if checkResult > -1
			object.value4 = 1
			object.value5++
			if object.value5 == 4
				PlaySfx(SfxName[Ring L], 0)
				saveRAM[278] ^= 1
				WriteSaveRAM()
			end if
		end if
		temp0 = screen.xcenter
		switch object.value7
		case 0
			temp0 -= 50
			temp1 = temp0
			temp1 += 42
			break
		case 1
			temp0 -= 6
			temp1 = temp0
			temp1 += 42
			break
		case 2
			temp0 -= 6
			temp1 = temp0
			temp1 += 42
			break
		case 3
			temp0 -= 93
			temp1 = temp0
			temp1 += 39
			break
		end switch
		CheckTouchRect(temp0, 90, temp1, 150)
		if checkResult > -1
			object.value4 = 1
			object.value7++
			if object.value7 == 4
			saveRAM[279] ^= 1
			switch saveRAM[279]
				case 0
					PlaySfx(SfxName[Hurt], 0)
					break
				case 1
					PlaySfx(SfxName[Ring L], 0)
					break
			end switch			
			WriteSaveRAM()
			end if
		end if
	end if
	
	
	if object.value4 == 0 //There's a reason we're checking again and not just adding this to the above check. Don't touch this.
		CheckTouchRect(0, 0, screen.xsize, screen.ysize)
		if checkResult > -1
			if object.state < 5
				//object.state = 5
				//object.value0 = 0
			end if
		end if
	end if
end function


event ObjectMain
	if reset.done == 0
		stage.playerListPos = 0
		credits.screen = 0
		stage.debugMode = 0
		options.stageSelectFlag = 0
		options.gameMode = 0
		options.attractMode = 0
		player.lives = 3
		player.continues = 0
		player.score = 0
		player.scoreBonus = 0xC350
		stage.player2Enabled = 0
		lampPostID = 0
		specialStage.listPos = 0
		specialStage.emeralds = 0
		specialStage.nextZone = 0
		
		//if screen.xsize != 320
		//	CallNativeFunction2(SetScreenWidth, 426, 0)
		//end if
		
		WriteSaveRAM()
		reset.done = 1
	end if

	if inputPress.start == 1
		if object.state < 5
			//object.state = 5
			//object.value0 = 0
		end if
	end if
	if inputDown.down == 1
		object.value14++
		if object.value14 > 180
			ResetObjectEntity(object.entityPos, TypeName[Control Test], 0, object.xpos, object.ypos)
		end if
	else
		object.value14 = 0
	end if
	
	if inputPress.up == 1
		object.value16++
		if object.value16 == 5
			CallFunction(Save_Transfer)
		end if
	end if

	switch object.state
	case SEGA_POPUP
		SetClassicFade(0, 0, 0, object.timer)
		object.timer -= 8
		object.value10++
		if object.value10 == 15
			PlaySfx(SfxName[Chaotix Sega], 0)
		end if
		if object.timer < 128
			object.zpos -= 8000
			if object.zpos <= 24000
				object.state = SEGA_JIGGLE
			end if
		end if
		break
		
	case SEGA_JIGGLE
		CallFunction(Sega_MoveVertices)
		
		if object.timer > 40
			temp2 = 6	// column 2 and 4
			temp3 = 7	// column 3
			temp4 = 6	// row 2
			temp5 = 8	// row 3
		else
			temp2 = 14	// column 2 and 4
			temp3 = 13	// column 3
			temp4 = 10	// row 2
			temp5 = 12	// row 3
		end if
		
		object.timer++
		object.column2Timer += temp2
		object.column3Timer += temp3
		object.column4Timer = object.column2Timer
		object.column4Timer += 128
		
		if object.timer > 6
			object.row2Timer += temp4
		end if
		object.row3Timer += temp5
		
		object.zpos += 150
		if object.zpos >= 50160
			object.state++
			object.timer = 0
			object.zpos = 50160
		end if
		break
		
	case SEGA_STOPJIGGLE
		CallFunction(Sega_MoveVertices)
		
		checkResult = true
		temp2 = 6
		if object.column2Timer > 0
			checkResult = false
			if object.column2Timer > 128
				object.column2Timer += temp2
			else
				object.column2Timer -= temp2
			end if
		else
			object.column2Timer = 0
		end if
		if object.column3Timer > 0
			checkResult = false
			if object.column3Timer > 128
				object.column3Timer += temp2
			else
				object.column3Timer -= temp2
			end if
		else
			object.column3Timer = 0
		end if
		if object.column4Timer > 0
			checkResult = false
			if object.column4Timer > 128
				object.column4Timer += temp2
			else
				object.column4Timer -= temp2
			end if
		else
			object.column4Timer = 0
		end if
		if object.row2Timer > 0
			checkResult = false
			if object.row2Timer > 128
				object.row2Timer += temp2
			else
				object.row2Timer -= temp2
			end if
		else
			object.row2Timer = 0
		end if
		if object.row3Timer > 0
			checkResult = false
			if object.row3Timer > 128
				object.row3Timer += temp2
			else
				object.row3Timer -= temp2
			end if
		else
			object.row3Timer = 0
		end if
		if checkResult == true
			object.timer = 0
			object.state++
		end if
		break
		
	case SEGA_PALETTECYCLE
		object.timer++
		if object.timer <= 65
			temp0 = object.timer
			temp0 %= 4
			if temp0 == 0
				RotatePalette(0, 225, 240, false)
				GetPaletteEntry(0, 240, temp0)
				SetPaletteEntry(0, 241, temp0)
			end if
		end if
		if object.timer > 128
			object.timer = 0
			object.state++
		end if
		break
		
	case SEGA_POPUP2
		object.timer += 4
		if object.timer < 240
			if object.zpos > 2000
				object.zpos -= 1200
			end if
			SetClassicFade(0, 0, 0, object.timer)
		else
			ResetObjectEntity(object.entityPos, TypeName[Sonic Team], 0, object.xpos, object.ypos)
			SetClassicFade(0, 0, 0, 255)
			object.state++
		end if
		break
		
	end switch
end event


event ObjectDraw
	DrawRect(0, 0, screen.xsize, screen.ysize, 0, 0, 0, 255)

	DrawSpriteScreenXY(1, screen.xcenter, screen.ycenter)	
	
	switch object.state
	case SEGA_POPUP
	case SEGA_JIGGLE
	case SEGA_STOPJIGGLE
	case SEGA_POPUP2
		temp7 = 0
		while temp7 < 4
			GetTableValue(currentVertex, temp7, Column1Vertices)
			VertexBuffer[currentVertex].x = column1.x
			temp7++
		loop
		temp7 = 0
		while temp7 < 4
			GetTableValue(currentVertex, temp7, Column2Vertices)
			VertexBuffer[currentVertex].x = column2.x
			temp7++
		loop
		temp7 = 0
		while temp7 < 4
			GetTableValue(currentVertex, temp7, Column3Vertices)
			VertexBuffer[currentVertex].x = column3.x
			temp7++
		loop
		temp7 = 0
		while temp7 < 4
			GetTableValue(currentVertex, temp7, Column4Vertices)
			VertexBuffer[currentVertex].x = column4.x
			temp7++
		loop
		temp7 = 0
		while temp7 < 4
			GetTableValue(currentVertex, temp7, Column5Vertices)
			VertexBuffer[currentVertex].x = column5.x
			temp7++
		loop
		
		temp7 = 0
		while temp7 < 5
			GetTableValue(currentVertex, temp7, row1Vertices)
			VertexBuffer[currentVertex].y = row1.y
			temp7++
		loop
		temp7 = 0
		while temp7 < 5
			GetTableValue(currentVertex, temp7, row2Vertices)
			VertexBuffer[currentVertex].y = row2.y
			temp7++
		loop
		temp7 = 0
		while temp7 < 5
			GetTableValue(currentVertex, temp7, row3Vertices)
			VertexBuffer[currentVertex].y = row3.y
			temp7++
		loop
		temp7 = 0
		while temp7 < 5
			GetTableValue(currentVertex, temp7, row4Vertices)
			VertexBuffer[currentVertex].y = row4.y
			temp7++
		loop
		
		temp0 = object.zpos
		Abs(temp0)
		MatrixTranslateXYZ(MAT_WORLD, object.xpos3D, object.ypos3D, object.zpos)
		object.drawOrder = 6
		Draw3DScene()
		break
	
	case SEGA_PALETTECYCLE
		object.alpha = 0x100
		object.direction = FLIP_Y
		DrawSpriteScreenFX(0, FX_FLIP, screen.xcenter, screen.ycenter)
		break
	
	end switch
	
	if inputPress.left == true
		object.timer = 0
		object.row2Timer = 0
		object.row3Timer = 0
		object.column2Timer = 0
		object.column3Timer = 0
		object.column4Timer = 0
		object.zpos = 400000
		object.state = SEGA_POPUP
	end if
end event


event ObjectStartup
	ReadSaveRAM()
	LoadSpriteSheet("Title/SEGA.gif")
	SpriteFrame(-82, -26, 168, 53, 2, 2)
	SpriteFrame(-155, -110, 314, 225, 1, 286)	//space bg	
							
	options.touchControls = 0
	
	foreach(TypeName[Sega], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].timer = 255
		object[arrayPos0].zpos = 400000
		object[arrayPos0].xpos3D = -168
		object[arrayPos0].xpos3D <<= 8
		object[arrayPos0].xpos3D /= 2
		object[arrayPos0].ypos3D = -55
		object[arrayPos0].ypos3D <<= 8
		object[arrayPos0].ypos3D /= 2
	next

	scene3D.vertexCount = 0
	scene3D.faceCount   = 0

	scene3D.projectionX  = 200
	scene3D.projectionY  = 200
	
	// reset matrix
	MatrixTranslateXYZ(MAT_WORLD, 0, 0, 0)
	MatrixTranslateXYZ(MAT_VIEW, 0, 0, 0)
	
	currentVertex = scene3D.vertexCount
	currentFace = scene3D.faceCount
	
	temp7 = 0
	while temp7 < FaceCount
		currentVertex = scene3D.vertexCount
		currentFace = scene3D.faceCount
		
		FaceBuffer[currentFace].flag  = FACE_TEXTURED_3D
		FaceBuffer[currentFace].color  = 0xFF808080
		
		temp6 = temp7
		temp6 %= 4
		GetTableValue(temp0, temp6, XOffsets)
		GetTableValue(temp2, temp6, XSizes)
		
		temp6 = temp7
		temp6 /= 4
		GetTableValue(temp1, temp6, YOffsets)
		GetTableValue(temp3, temp6, YSizes)
		
		temp0 += temp2
		temp1 += temp3
		
		// Top Left
		FaceBuffer[currentFace].a  = currentVertex
		VertexBuffer[currentVertex].x = temp0
		VertexBuffer[currentVertex].y = temp1
		VertexBuffer[currentVertex].x <<= 8
		VertexBuffer[currentVertex].y <<= 8
		
		VertexBuffer[currentVertex].u = temp0
		VertexBuffer[currentVertex].v = temp1
		//VertexBuffer[currentVertex].u += SpriteX
		//VertexBuffer[currentVertex].v += SpriteY
		
		// Top Right
		temp1 -= temp3
		currentVertex++
		FaceBuffer[currentFace].b  = currentVertex
		VertexBuffer[currentVertex].x = temp0
		VertexBuffer[currentVertex].y = temp1
		VertexBuffer[currentVertex].x <<= 8
		VertexBuffer[currentVertex].y <<= 8
		
		VertexBuffer[currentVertex].u = temp0
		VertexBuffer[currentVertex].v = temp1
		//VertexBuffer[currentVertex].u += SpriteX
		//VertexBuffer[currentVertex].v += SpriteY
		
		// Bottom Left
		temp0 -= temp2
		currentVertex++
		FaceBuffer[currentFace].c  = currentVertex
		VertexBuffer[currentVertex].x = temp0
		VertexBuffer[currentVertex].y = temp1
		VertexBuffer[currentVertex].x <<= 8
		VertexBuffer[currentVertex].y <<= 8
		
		VertexBuffer[currentVertex].u = temp0
		VertexBuffer[currentVertex].v = temp1
		//VertexBuffer[currentVertex].u += SpriteX
		//VertexBuffer[currentVertex].v += SpriteY
		
		// Bottom Right
		temp1 += temp3
		currentVertex++
		FaceBuffer[currentFace].d  = currentVertex
		VertexBuffer[currentVertex].x = temp0
		VertexBuffer[currentVertex].y = temp1
		VertexBuffer[currentVertex].x <<= 8
		VertexBuffer[currentVertex].y <<= 8
		
		VertexBuffer[currentVertex].u = temp0
		VertexBuffer[currentVertex].v = temp1
		//VertexBuffer[currentVertex].u += SpriteX
		//VertexBuffer[currentVertex].v += SpriteY
		
		scene3D.vertexCount += 4
		scene3D.faceCount += 1
		temp7++
	loop
	
	// Connect the vertices
	FaceBuffer[FACEA2].c = FaceBuffer[FACEA1].b
	
	FaceBuffer[FACEA3].c = FaceBuffer[FACEA2].b
	
	FaceBuffer[FACEA4].c = FaceBuffer[FACEA3].b
	
	
	FaceBuffer[FACEB1].c = FaceBuffer[FACEA1].d
	
	FaceBuffer[FACEA2].d = FaceBuffer[FACEA1].a
	FaceBuffer[FACEB1].b = FaceBuffer[FACEA1].a
	FaceBuffer[FACEB2].c = FaceBuffer[FACEA1].a
	
	FaceBuffer[FACEA3].d = FaceBuffer[FACEA2].a
	FaceBuffer[FACEB2].b = FaceBuffer[FACEA2].a
	FaceBuffer[FACEB3].c = FaceBuffer[FACEA2].a
	
	FaceBuffer[FACEA4].d = FaceBuffer[FACEA3].a
	FaceBuffer[FACEB3].b = FaceBuffer[FACEA3].a
	FaceBuffer[FACEB4].c = FaceBuffer[FACEA3].a
	
	FaceBuffer[FACEB4].b = FaceBuffer[FACEA4].a
	
	
	FaceBuffer[FACEC1].c = FaceBuffer[FACEB1].d
	
	FaceBuffer[FACEB2].d = FaceBuffer[FACEB1].a
	FaceBuffer[FACEC1].b = FaceBuffer[FACEB1].a
	FaceBuffer[FACEC2].c = FaceBuffer[FACEB1].a
	
	FaceBuffer[FACEB3].d = FaceBuffer[FACEB2].a
	FaceBuffer[FACEC2].b = FaceBuffer[FACEB2].a
	FaceBuffer[FACEC3].c = FaceBuffer[FACEB2].a
	
	FaceBuffer[FACEB4].d = FaceBuffer[FACEB3].a
	FaceBuffer[FACEC3].b = FaceBuffer[FACEB3].a
	FaceBuffer[FACEC4].c = FaceBuffer[FACEB3].a
	
	FaceBuffer[FACEC4].b = FaceBuffer[FACEB4].a
	
	
	FaceBuffer[FACEC1].c = FaceBuffer[FACEB1].d
	
	FaceBuffer[FACEB2].d = FaceBuffer[FACEB1].a
	FaceBuffer[FACEC1].b = FaceBuffer[FACEB1].a
	FaceBuffer[FACEC2].c = FaceBuffer[FACEB1].a
	
	FaceBuffer[FACEB3].d = FaceBuffer[FACEB2].a
	FaceBuffer[FACEC2].b = FaceBuffer[FACEB2].a
	FaceBuffer[FACEC3].c = FaceBuffer[FACEB2].a
	
	FaceBuffer[FACEB4].d = FaceBuffer[FACEB3].a
	FaceBuffer[FACEC3].b = FaceBuffer[FACEB3].a
	FaceBuffer[FACEC4].c = FaceBuffer[FACEB3].a
	
	FaceBuffer[FACEC4].b = FaceBuffer[FACEB4].a
	
	
	FaceBuffer[FACEC2].d = FaceBuffer[FACEC1].a
	
	FaceBuffer[FACEC3].d = FaceBuffer[FACEC2].a
	
	FaceBuffer[FACEC4].d = FaceBuffer[FACEC3].a
	
	currentVertex = FaceBuffer[FACEC1].d
	column1.x = VertexBuffer[currentVertex].x
	SetTableValue(FaceBuffer[FACEC1].d, 0, Column1Vertices)
	SetTableValue(FaceBuffer[FACEB1].d, 1, Column1Vertices)
	SetTableValue(FaceBuffer[FACEA1].d, 2, Column1Vertices)
	SetTableValue(FaceBuffer[FACEA1].c, 3, Column1Vertices)
	
	currentVertex = FaceBuffer[FACEC1].a
	column2.x = VertexBuffer[currentVertex].x
	SetTableValue(FaceBuffer[FACEC1].a, 0, Column2Vertices)
	SetTableValue(FaceBuffer[FACEB1].a, 1, Column2Vertices)
	SetTableValue(FaceBuffer[FACEA1].a, 2, Column2Vertices)
	SetTableValue(FaceBuffer[FACEA1].b, 3, Column2Vertices)
	
	currentVertex = FaceBuffer[FACEC2].a
	column3.x = VertexBuffer[currentVertex].x
	SetTableValue(FaceBuffer[FACEC2].a, 0, Column3Vertices)
	SetTableValue(FaceBuffer[FACEB2].a, 1, Column3Vertices)
	SetTableValue(FaceBuffer[FACEA2].a, 2, Column3Vertices)
	SetTableValue(FaceBuffer[FACEA2].b, 3, Column3Vertices)
	
	currentVertex = FaceBuffer[FACEC3].a
	column4.x = VertexBuffer[currentVertex].x
	SetTableValue(FaceBuffer[FACEC3].a, 0, Column4Vertices)
	SetTableValue(FaceBuffer[FACEB3].a, 1, Column4Vertices)
	SetTableValue(FaceBuffer[FACEA3].a, 2, Column4Vertices)
	SetTableValue(FaceBuffer[FACEA3].b, 3, Column4Vertices)
	
	currentVertex = FaceBuffer[FACEC4].a
	column5.x = VertexBuffer[currentVertex].x
	SetTableValue(FaceBuffer[FACEC4].a, 0, Column5Vertices)
	SetTableValue(FaceBuffer[FACEB4].a, 1, Column5Vertices)
	SetTableValue(FaceBuffer[FACEA4].a, 2, Column5Vertices)
	SetTableValue(FaceBuffer[FACEA4].b, 3, Column5Vertices)
	
	
	currentVertex = FaceBuffer[FACEA1].c
	row1.y = VertexBuffer[currentVertex].y
	SetTableValue(FaceBuffer[FACEA1].c, 0, Row1Vertices)
	SetTableValue(FaceBuffer[FACEA1].b, 1, Row1Vertices)
	SetTableValue(FaceBuffer[FACEA2].b, 2, Row1Vertices)
	SetTableValue(FaceBuffer[FACEA3].b, 3, Row1Vertices)
	SetTableValue(FaceBuffer[FACEA3].b, 4, Row1Vertices)
	
	currentVertex = FaceBuffer[FACEA1].a
	row2.y = VertexBuffer[currentVertex].y
	SetTableValue(FaceBuffer[FACEA1].d, 0, Row2Vertices)
	SetTableValue(FaceBuffer[FACEA1].a, 1, Row2Vertices)
	SetTableValue(FaceBuffer[FACEA2].a, 2, Row2Vertices)
	SetTableValue(FaceBuffer[FACEA3].a, 3, Row2Vertices)
	SetTableValue(FaceBuffer[FACEA3].a, 4, Row2Vertices)
	
	currentVertex = FaceBuffer[FACEB1].a
	row3.y = VertexBuffer[currentVertex].y
	SetTableValue(FaceBuffer[FACEB1].d, 0, Row3Vertices)
	SetTableValue(FaceBuffer[FACEB1].a, 1, Row3Vertices)
	SetTableValue(FaceBuffer[FACEB2].a, 2, Row3Vertices)
	SetTableValue(FaceBuffer[FACEB3].a, 3, Row3Vertices)
	SetTableValue(FaceBuffer[FACEB3].a, 4, Row3Vertices)
	
	currentVertex = FaceBuffer[FACEC1].a
	row4.y = VertexBuffer[currentVertex].y
	SetTableValue(FaceBuffer[FACEC1].d, 0, Row4Vertices)
	SetTableValue(FaceBuffer[FACEC1].a, 1, Row4Vertices)
	SetTableValue(FaceBuffer[FACEC2].a, 2, Row4Vertices)
	SetTableValue(FaceBuffer[FACEC3].a, 3, Row4Vertices)
	SetTableValue(FaceBuffer[FACEC3].a, 4, Row4Vertices)
	
	LoadPalette("SEGA.act", 0, 223, 223, 256)
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
end event
